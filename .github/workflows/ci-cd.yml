name: CI/CD Pipeline (Docker - Self-hosted, Windows PowerShell)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: üßπ Clean old containers
        shell: powershell
        # "|| true" ƒë·ªÉ b·ªè qua l·ªói n·∫øu container kh√¥ng t·ªìn t·∫°i
        run: |
          Write-Host "Stopping and removing ALL existing containers (force)..."
          # L·∫•y danh s√°ch ID c·ªßa T·∫§T C·∫¢ container (ƒëang ch·∫°y ho·∫∑c ƒë√£ d·ª´ng)
          $containerIDs = docker ps -aq
          
          if ($containerIDs) {
            # D·ª´ng v√† x√≥a b·∫Øt bu·ªôc t·∫•t c·∫£ container
            docker rm -f $containerIDs -ErrorAction SilentlyContinue
            Write-Host "All existing containers stopped and removed."
          } else {
            Write-Host "No containers found to remove."
          }
          
          Write-Host "Pruning docker system (images, build cache, networks, and VOLUMES)..."
          # D·ªçn d·∫πp tri·ªát ƒë·ªÉ: X√≥a images kh√¥ng d√πng, build cache, networks, v√† quan tr·ªçng l√† VOLUMES kh√¥ng d√πng
          docker system prune -af --volumes
          

      - name: üîê Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # üßæ Ghi t·∫•t c·∫£ secrets ra file .env ƒë·ªÉ Docker Compose c√≥ th·ªÉ ƒë·ªçc
      - name: üß© Generate .env file for Docker Compose
        shell: powershell
        run: |
          # X√≥a file .env c≈© (n·∫øu c√≥) ƒë·ªÉ tr√°nh ghi n·ªëi ti·∫øp
          if (Test-Path .\.env) { Remove-Item .\.env }

          # Ghi file m·ªõi v·ªõi encoding ASCII (an to√†n cho Docker Compose)
          "MONGODB_PRODUCT_URI=${{ secrets.MONGODB_PRODUCT_URI }}" | Out-File -Encoding ascii -FilePath .env
          "MONGODB_ORDER_URI=${{ secrets.MONGODB_ORDER_URI }}" | Out-File -Encoding ascii -FilePath .env -Append
          "MONGODB_AUTH_URI=${{ secrets.MONGODB_AUTH_URI }}" | Out-File -Encoding ascii -FilePath .env -Append
          "JWT_SECRET=${{ secrets.JWT_SECRET }}" | Out-File -Encoding ascii -FilePath .env -Append
          "AUTH_SERVICE_URL=${{ secrets.AUTH_SERVICE_URL }}" | Out-File -Encoding ascii -FilePath .env -Append
          "RABBITMQ_URI=${{ secrets.RABBITMQ_URI }}" | Out-File -Encoding ascii -FilePath .env -Append
          "RABBITMQ_QUEUE=${{ secrets.RABBITMQ_QUEUE }}" | Out-File -Encoding ascii -FilePath .env -Append
          "PRODUCT_PORT=${{ secrets.PRODUCT_PORT }}" | Out-File -Encoding ascii -FilePath .env -Append
          "ORDER_PORT=${{ secrets.ORDER_PORT }}" | Out-File -Encoding ascii -FilePath .env -Append
          "AUTH_PORT=${{ secrets.AUTH_PORT }}" | Out-File -Encoding ascii -FilePath .env -Append
          "API_GATEWAY_PORT=${{ secrets.API_GATEWAY_PORT }}" | Out-File -Encoding ascii -FilePath .env -Append

      - name: üèóÔ∏è Build and run services
        shell: powershell
        run: |
          echo "üöÄ Starting Docker Compose..."
          docker compose up -d --build

      - name: ‚è≥ Wait for API Gateway
        shell: powershell
        run: |
          for ($i = 0; $i -lt 10; $i++) {
            try {
              Invoke-WebRequest -Uri "http://localhost:${{ secrets.API_GATEWAY_PORT }}/api/health" -UseBasicParsing
              Write-Host "‚úÖ API Gateway is up!"
              break
            } catch {
              Write-Host "Waiting for API Gateway..."
              Start-Sleep -Seconds 5
            }
          }

      - name: üì§ Push images to DockerHub
        shell: powershell
        run: docker compose push
